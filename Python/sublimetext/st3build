#!/usr/bin/env python3.5

from os import environ, sep as pathsep, putenv
from os.path import basename, dirname, isdir, isfile, join as joinpath
from subprocess import run
from sys import argv, exit, stderr


def main():
    if len(argv) < 2:
        raise RuntimeError('No build file/path specified')
    lastdir = projdir = argv[1]
    maxrecurse = 100
    project = ''
    while projdir and projdir != pathsep:
        maxrecurse -= 1
        if not maxrecurse:
            raise RuntimeError('Infinite search')
        if not isfile(joinpath(projdir, 'CMakeLists.txt')):
            if isdir(joinpath(projdir, 'build')):
                project = basename(lastdir)
                break
        lastdir = projdir
        projdir = dirname(projdir)
    if not project:
        raise RuntimeError('Unable to find project directory')
    global environ
    opt_env_file = joinpath(projdir, 'build', '.environ')
    if isfile(opt_env_file):
        with open(opt_env_file, 'rt') as pathfd:
            for line in pathfd:
                line = line.strip()
                comment = line.find('#')
                if comment >= 0:
                    line = line[:comment]
                if not line or '=' not in line:
                    continue
                name, value = line.split('=', 1)
                value = value.strip('"').strip()
                if not value:
                    continue
                if name == 'PATH':
                    sys_paths = environ.get('PATH').split(':')
                    opt_paths = []
                    for path in line.strip().split(':'):
                        if path and path not in opt_paths and path not in sys_paths: 
                            opt_paths.append(path)
                    sys_paths = opt_paths + sys_paths
                    value = ':'.join(sys_paths)
                environ[name] = value
    args = ['host/bin/build.sh', project]
    cp = run(args, shell=False, cwd=projdir)
    if cp.returncode:
        raise RuntimeError("  build command '%s' failed\n" % ' '.join(args))


if __name__ == '__main__':
    try:
        main()
        exit(0)
    except Exception as ex:
        print(str(ex), file=stderr)
        exit(1)
